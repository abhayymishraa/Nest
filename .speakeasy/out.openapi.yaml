openapi: "3.1.0"
info:
  title: "OWASP Nest API"
  description: "API for OWASP related entities"
  version: "1.0.0"
paths:
  "/api/v1/github/issues/":
    get:
      tags:
        - "GitHub"
      summary: "List issues"
      description: "Retrieve a paginated list of GitHub issues."
      operationId: "list_issues"
      parameters:
        - name: "state"
          in: "query"
          description: "State of the issue"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/State"}
              - type: "null"
            description: "State of the issue"
        - name: "ordering"
          in: "query"
          description: "Ordering field"
          required: false
          schema:
            anyOf:
              - type: "string"
                enum:
                  - "created_at"
                  - "-created_at"
                  - "updated_at"
                  - "-updated_at"
              - type: "null"
            title: "Ordering"
            description: "Ordering field"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            title: "Page"
            minimum: 1
            default: 1
        - name: "page_size"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 1
              - type: "null"
            title: "Page Size"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PagedIssueSchema"}
      security:
        - ApiKeyAuth: []
  "/api/v1/github/labels/":
    get:
      tags:
        - "GitHub"
      summary: "List labels"
      description: "Retrieve a paginated list of GitHub labels."
      operationId: "list_labels"
      parameters:
        - name: "color"
          in: "query"
          description: "Color of the label"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Color"
            description: "Color of the label"
            example: "d93f0b"
          example: "d93f0b"
        - name: "ordering"
          in: "query"
          description: "Ordering field"
          required: false
          schema:
            anyOf:
              - type: "string"
                enum:
                  - "nest_created_at"
                  - "-nest_created_at"
                  - "nest_updated_at"
                  - "-nest_updated_at"
              - type: "null"
            title: "Ordering"
            description: "Ordering field"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            title: "Page"
            minimum: 1
            default: 1
        - name: "page_size"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 1
              - type: "null"
            title: "Page Size"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PagedLabelSchema"}
      security:
        - ApiKeyAuth: []
  "/api/v1/github/organizations/":
    get:
      tags:
        - "GitHub"
      summary: "List organizations"
      description: "Retrieve a paginated list of GitHub organizations."
      operationId: "list_organizations"
      parameters:
        - name: "location"
          in: "query"
          description: "Location of the organization"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Location"
            description: "Location of the organization"
            example: "United States of America"
          example: "United States of America"
        - name: "ordering"
          in: "query"
          description: "Ordering field"
          required: false
          schema:
            anyOf:
              - type: "string"
                enum:
                  - "created_at"
                  - "-created_at"
                  - "updated_at"
                  - "-updated_at"
              - type: "null"
            title: "Ordering"
            description: "Ordering field"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            title: "Page"
            minimum: 1
            default: 1
        - name: "page_size"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 1
              - type: "null"
            title: "Page Size"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PagedOrganizationSchema"}
      security:
        - ApiKeyAuth: []
  "/api/v1/github/releases/":
    get:
      tags:
        - "GitHub"
      summary: "List releases"
      description: "Retrieve a paginated list of GitHub releases."
      operationId: "list_releases"
      parameters:
        - name: "tag_name"
          in: "query"
          description: "Tag name of the release"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Tag Name"
            description: "Tag name of the release"
            example: "v1.0.0"
          example: "v1.0.0"
        - name: "ordering"
          in: "query"
          description: "Ordering field"
          required: false
          schema:
            anyOf:
              - type: "string"
                enum:
                  - "created_at"
                  - "-created_at"
                  - "published_at"
                  - "-published_at"
              - type: "null"
            title: "Ordering"
            description: "Ordering field"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            title: "Page"
            minimum: 1
            default: 1
        - name: "page_size"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 1
              - type: "null"
            title: "Page Size"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PagedReleaseSchema"}
      security:
        - ApiKeyAuth: []
  "/api/v1/github/repositories/":
    get:
      tags:
        - "GitHub"
      summary: "List repositories"
      description: "Retrieve a paginated list of GitHub repositories."
      operationId: "list_repositories"
      parameters:
        - name: "ordering"
          in: "query"
          description: "Ordering field"
          required: false
          schema:
            anyOf:
              - type: "string"
                enum:
                  - "created_at"
                  - "-created_at"
                  - "updated_at"
                  - "-updated_at"
              - type: "null"
            title: "Ordering"
            description: "Ordering field"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            title: "Page"
            minimum: 1
            default: 1
        - name: "page_size"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 1
              - type: "null"
            title: "Page Size"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PagedRepositorySchema"}
      security:
        - ApiKeyAuth: []
  "/api/v1/github/users/":
    get:
      tags:
        - "GitHub"
      summary: "List users"
      description: "Retrieve a paginated list of GitHub users."
      operationId: "list_users"
      parameters:
        - name: "company"
          in: "query"
          description: "Company of the user"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Company"
            description: "Company of the user"
        - name: "location"
          in: "query"
          description: "Location of the user"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Location"
            description: "Location of the user"
            example: "India"
          example: "India"
        - name: "ordering"
          in: "query"
          description: "Ordering field"
          required: false
          schema:
            anyOf:
              - type: "string"
                enum:
                  - "created_at"
                  - "-created_at"
                  - "updated_at"
                  - "-updated_at"
              - type: "null"
            title: "Ordering"
            description: "Ordering field"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            title: "Page"
            minimum: 1
            default: 1
        - name: "page_size"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 1
              - type: "null"
            title: "Page Size"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PagedUserSchema"}
      security:
        - ApiKeyAuth: []
  "/api/v1/github/users/{login}":
    get:
      tags:
        - "GitHub"
      summary: "Get user by login"
      description: "Retrieve a GitHub user by login."
      operationId: "get_user"
      parameters:
        - name: "login"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Login"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UserSchema"}
        "404":
          description: "Not Found"
          content:
            "application/json":
              schema:
                type: "object"
                title: "Response"
                additionalProperties: true
      security:
        - ApiKeyAuth: []
  "/api/v1/owasp/chapters/":
    get:
      tags:
        - "OWASP"
      summary: "List chapters"
      description: "Retrieve a paginated list of OWASP chapters."
      operationId: "list_chapters"
      parameters:
        - name: "country"
          in: "query"
          description: "Country of the chapter"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Country"
            description: "Country of the chapter"
            example: "India"
          example: "India"
        - name: "region"
          in: "query"
          description: "Region of the chapter"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Region"
            description: "Region of the chapter"
            example: "Asia"
          example: "Asia"
        - name: "ordering"
          in: "query"
          description: "Ordering field"
          required: false
          schema:
            anyOf:
              - type: "string"
                enum:
                  - "created_at"
                  - "-created_at"
                  - "updated_at"
                  - "-updated_at"
              - type: "null"
            title: "Ordering"
            description: "Ordering field"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            title: "Page"
            minimum: 1
            default: 1
        - name: "page_size"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 1
              - type: "null"
            title: "Page Size"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PagedChapterSchema"}
      security:
        - ApiKeyAuth: []
  "/api/v1/owasp/committees/":
    get:
      tags:
        - "OWASP"
      summary: "List committees"
      description: "Retrieve a paginated list of OWASP committees."
      operationId: "list_committees"
      parameters:
        - name: "ordering"
          in: "query"
          description: "Ordering field"
          required: false
          schema:
            anyOf:
              - type: "string"
                enum:
                  - "created_at"
                  - "-created_at"
                  - "updated_at"
                  - "-updated_at"
              - type: "null"
            title: "Ordering"
            description: "Ordering field"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            title: "Page"
            minimum: 1
            default: 1
        - name: "page_size"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 1
              - type: "null"
            title: "Page Size"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PagedCommitteeSchema"}
      security:
        - ApiKeyAuth: []
  "/api/v1/owasp/events/":
    get:
      tags:
        - "OWASP"
      summary: "List events"
      description: "Retrieve a paginated list of OWASP events."
      operationId: "list_events"
      parameters:
        - name: "ordering"
          in: "query"
          description: "Ordering field"
          required: false
          schema:
            anyOf:
              - type: "string"
                enum:
                  - "start_date"
                  - "-start_date"
                  - "end_date"
                  - "-end_date"
              - type: "null"
            title: "Ordering"
            description: "Ordering field"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            title: "Page"
            minimum: 1
            default: 1
        - name: "page_size"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 1
              - type: "null"
            title: "Page Size"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PagedEventSchema"}
      security:
        - ApiKeyAuth: []
  "/api/v1/owasp/projects/":
    get:
      tags:
        - "OWASP"
      summary: "List projects"
      description: "Retrieve a paginated list of OWASP projects."
      operationId: "list_projects"
      parameters:
        - name: "level"
          in: "query"
          description: "Level of the project"
          required: false
          schema:
            anyOf:
              - {"$ref": "#/components/schemas/ProjectLevel"}
              - type: "null"
            description: "Level of the project"
        - name: "ordering"
          in: "query"
          description: "Ordering field"
          required: false
          schema:
            anyOf:
              - type: "string"
                enum:
                  - "created_at"
                  - "-created_at"
                  - "updated_at"
                  - "-updated_at"
              - type: "null"
            title: "Ordering"
            description: "Ordering field"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            title: "Page"
            minimum: 1
            default: 1
        - name: "page_size"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "integer"
                minimum: 1
              - type: "null"
            title: "Page Size"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PagedProjectSchema"}
      security:
        - ApiKeyAuth: []
components:
  schemas:
    "State":
      type: "string"
      title: "State"
      enum:
        - "open"
        - "closed"
    "IssueSchema":
      type: "object"
      properties:
        "body":
          type: "string"
          title: "Body"
        "created_at":
          type: "string"
          title: "Created At"
          format: "date-time"
        "title":
          type: "string"
          title: "Title"
        "state": {"$ref": "#/components/schemas/State"}
        "updated_at":
          type: "string"
          title: "Updated At"
          format: "date-time"
        "url":
          type: "string"
          title: "Url"
      title: "IssueSchema"
      required:
        - "body"
        - "created_at"
        - "title"
        - "state"
        - "updated_at"
        - "url"
      description: "Schema for Issue."
    "PagedIssueSchema":
      type: "object"
      properties:
        "items":
          type: "array"
          items: {"$ref": "#/components/schemas/IssueSchema"}
          title: "Items"
        "count":
          type: "integer"
          title: "Count"
      title: "PagedIssueSchema"
      required:
        - "items"
        - "count"
    "LabelSchema":
      type: "object"
      properties:
        "color":
          type: "string"
          title: "Color"
        "description":
          type: "string"
          title: "Description"
        "name":
          type: "string"
          title: "Name"
      title: "LabelSchema"
      required:
        - "color"
        - "description"
        - "name"
      description: "Schema for Label."
    "PagedLabelSchema":
      type: "object"
      properties:
        "items":
          type: "array"
          items: {"$ref": "#/components/schemas/LabelSchema"}
          title: "Items"
        "count":
          type: "integer"
          title: "Count"
      title: "PagedLabelSchema"
      required:
        - "items"
        - "count"
    "OrganizationSchema":
      type: "object"
      properties:
        "company":
          type: "string"
          title: "Company"
        "created_at":
          type: "string"
          title: "Created At"
          format: "date-time"
        "location":
          type: "string"
          title: "Location"
        "login":
          type: "string"
          title: "Login"
        "name":
          type: "string"
          title: "Name"
        "updated_at":
          type: "string"
          title: "Updated At"
          format: "date-time"
      title: "OrganizationSchema"
      required:
        - "company"
        - "created_at"
        - "location"
        - "login"
        - "name"
        - "updated_at"
      description: "Schema for Organization."
    "PagedOrganizationSchema":
      type: "object"
      properties:
        "items":
          type: "array"
          items: {"$ref": "#/components/schemas/OrganizationSchema"}
          title: "Items"
        "count":
          type: "integer"
          title: "Count"
      title: "PagedOrganizationSchema"
      required:
        - "items"
        - "count"
    "PagedReleaseSchema":
      type: "object"
      properties:
        "items":
          type: "array"
          items: {"$ref": "#/components/schemas/ReleaseSchema"}
          title: "Items"
        "count":
          type: "integer"
          title: "Count"
      title: "PagedReleaseSchema"
      required:
        - "items"
        - "count"
    "ReleaseSchema":
      type: "object"
      properties:
        "created_at":
          type: "string"
          title: "Created At"
          format: "date-time"
        "description":
          type: "string"
          title: "Description"
        "name":
          type: "string"
          title: "Name"
        "published_at":
          type: "string"
          title: "Published At"
          format: "date-time"
        "tag_name":
          type: "string"
          title: "Tag Name"
      title: "ReleaseSchema"
      required:
        - "created_at"
        - "description"
        - "name"
        - "published_at"
        - "tag_name"
      description: "Schema for Release."
    "PagedRepositorySchema":
      type: "object"
      properties:
        "items":
          type: "array"
          items: {"$ref": "#/components/schemas/RepositorySchema"}
          title: "Items"
        "count":
          type: "integer"
          title: "Count"
      title: "PagedRepositorySchema"
      required:
        - "items"
        - "count"
    "RepositorySchema":
      type: "object"
      properties:
        "created_at":
          type: "string"
          title: "Created At"
          format: "date-time"
        "description":
          type: "string"
          title: "Description"
        "name":
          type: "string"
          title: "Name"
        "updated_at":
          type: "string"
          title: "Updated At"
          format: "date-time"
      title: "RepositorySchema"
      required:
        - "created_at"
        - "description"
        - "name"
        - "updated_at"
      description: "Schema for Repository."
    "PagedUserSchema":
      type: "object"
      properties:
        "items":
          type: "array"
          items: {"$ref": "#/components/schemas/UserSchema"}
          title: "Items"
        "count":
          type: "integer"
          title: "Count"
      title: "PagedUserSchema"
      required:
        - "items"
        - "count"
    "UserSchema":
      type: "object"
      properties:
        "avatar_url":
          type: "string"
          title: "Avatar Url"
        "bio":
          type: "string"
          title: "Bio"
        "company":
          type: "string"
          title: "Company"
        "created_at":
          type: "string"
          title: "Created At"
          format: "date-time"
        "email":
          type: "string"
          title: "Email"
        "followers_count":
          type: "integer"
          title: "Followers Count"
        "following_count":
          type: "integer"
          title: "Following Count"
        "location":
          type: "string"
          title: "Location"
        "login":
          type: "string"
          title: "Login"
        "name":
          type: "string"
          title: "Name"
        "public_repositories_count":
          type: "integer"
          title: "Public Repositories Count"
        "title":
          type: "string"
          title: "Title"
        "twitter_username":
          type: "string"
          title: "Twitter Username"
        "updated_at":
          type: "string"
          title: "Updated At"
          format: "date-time"
        "url":
          type: "string"
          title: "Url"
      title: "UserSchema"
      required:
        - "avatar_url"
        - "bio"
        - "company"
        - "created_at"
        - "email"
        - "followers_count"
        - "following_count"
        - "location"
        - "login"
        - "name"
        - "public_repositories_count"
        - "title"
        - "twitter_username"
        - "updated_at"
        - "url"
      description: "Schema for User."
    "ChapterSchema":
      type: "object"
      properties:
        "country":
          type: "string"
          title: "Country"
        "created_at":
          type: "string"
          title: "Created At"
          format: "date-time"
        "name":
          type: "string"
          title: "Name"
        "region":
          type: "string"
          title: "Region"
        "updated_at":
          type: "string"
          title: "Updated At"
          format: "date-time"
      title: "ChapterSchema"
      required:
        - "country"
        - "created_at"
        - "name"
        - "region"
        - "updated_at"
      description: "Schema for Chapter."
    "PagedChapterSchema":
      type: "object"
      properties:
        "items":
          type: "array"
          items: {"$ref": "#/components/schemas/ChapterSchema"}
          title: "Items"
        "count":
          type: "integer"
          title: "Count"
      title: "PagedChapterSchema"
      required:
        - "items"
        - "count"
    "CommitteeSchema":
      type: "object"
      properties:
        "name":
          type: "string"
          title: "Name"
        "description":
          type: "string"
          title: "Description"
        "created_at":
          type: "string"
          title: "Created At"
          format: "date-time"
        "updated_at":
          type: "string"
          title: "Updated At"
          format: "date-time"
      title: "CommitteeSchema"
      required:
        - "name"
        - "description"
        - "created_at"
        - "updated_at"
      description: "Schema for Committee."
    "PagedCommitteeSchema":
      type: "object"
      properties:
        "items":
          type: "array"
          items: {"$ref": "#/components/schemas/CommitteeSchema"}
          title: "Items"
        "count":
          type: "integer"
          title: "Count"
      title: "PagedCommitteeSchema"
      required:
        - "items"
        - "count"
    "EventSchema":
      type: "object"
      properties:
        "description":
          type: "string"
          title: "Description"
        "name":
          type: "string"
          title: "Name"
        "end_date":
          type: "string"
          title: "End Date"
          format: "date-time"
        "start_date":
          type: "string"
          title: "Start Date"
          format: "date-time"
        "url":
          type: "string"
          title: "Url"
      title: "EventSchema"
      required:
        - "description"
        - "name"
        - "end_date"
        - "start_date"
        - "url"
      description: "Schema for Event."
    "PagedEventSchema":
      type: "object"
      properties:
        "items":
          type: "array"
          items: {"$ref": "#/components/schemas/EventSchema"}
          title: "Items"
        "count":
          type: "integer"
          title: "Count"
      title: "PagedEventSchema"
      required:
        - "items"
        - "count"
    "ProjectLevel":
      type: "string"
      title: "ProjectLevel"
      enum:
        - "other"
        - "incubator"
        - "lab"
        - "production"
        - "flagship"
      description: "Enum for OWASP project levels."
    "PagedProjectSchema":
      type: "object"
      properties:
        "items":
          type: "array"
          items: {"$ref": "#/components/schemas/ProjectSchema"}
          title: "Items"
        "count":
          type: "integer"
          title: "Count"
      title: "PagedProjectSchema"
      required:
        - "items"
        - "count"
    "ProjectSchema":
      type: "object"
      properties:
        "created_at":
          type: "string"
          title: "Created At"
          format: "date-time"
        "description":
          type: "string"
          title: "Description"
        "level": {"$ref": "#/components/schemas/ProjectLevel"}
        "name":
          type: "string"
          title: "Name"
        "updated_at":
          type: "string"
          title: "Updated At"
          format: "date-time"
      title: "ProjectSchema"
      required:
        - "created_at"
        - "description"
        - "level"
        - "name"
        - "updated_at"
      description: "Schema for Project."
  securitySchemes:
    "ApiKeyAuth":
      type: "apiKey"
      name: "X-API-Key"
      in: "header"
